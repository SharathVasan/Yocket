SCENARIO3: 
3. Design a database schema and REST APIs for an Event management platform that has the following specifications: 
  a. Create an event API that has the following model: 
    i. Event Name 
    ii. Event Starting time 
    iii. Event duration 
    iv. A single event, has a single Starting time and duration 
    
  b. GET API that fetches the events classified into two categories: 
    i. Upcoming event 
   ii. Live event- it should only be live 10 mins before the start time of the event
   
   
SOLUTION:

For this case I have used postgreSQL for RDBMS and AWS lambda and API Gateway services for running Node.js and connecting front end with an API.

Please note:
1. I have attached an image of the event table created under the schema name yocket. I have not written the store procudures to store values in the table
since it is not asked.
2. I have used node.js in aws lambda in order to connect database and frontend.

/////////////////////////////////////////////////             SOUTION: a            /////////////////////////////////////////////////////////////////////////////////////


const pg = require('pg')
const pool = new pg.Pool({
   user: process.env.user,
host: process.env.host,
database: process.env.database,
password: process.env.password,
port: process.env.port,
});


async function query (event) {
  const client = await pool.connect(); 
  let res, statement;
    statement =`Select * from ${schema}.event`;
  try {
    try {
      res = await client.query(statement);
        res = res.rows;
    // await client.query('COMMIT')
    } catch (err) {
    //  await client.query('ROLLBACK')
      throw err;
    }
  } finally {
    client.release();
  }
  return res;
}

exports.handler = async (event, context, callback) => {
   schema = event.schema;  
  var response ={};
    try {
      const rows = await query(event);
      
      //console.log(JSON.stringify(rows[0]))
     response = {
          "statusCode": 200,
           "body":rows
      };
      
      context.succeed(response);
    } catch (err) {
      response = {
          "statusCode": 400,
           "msg":err
      };
      context.succeed('Database ' + err);
    }
};


The response of this API would give you all the events, with its name, startdate and all the retalted information


